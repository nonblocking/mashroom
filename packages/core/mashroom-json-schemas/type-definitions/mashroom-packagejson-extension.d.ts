/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type MashroomPackagejsonExtension = JSONSchemaForNPMPackageJsonFiles & {
  /**
   * Mashroom Server plugins
   */
  mashroom?: MashroomPlugins;
  [k: string]: any;
};
export type JSONSchemaForNPMPackageJsonFiles = {
  [k: string]: any;
};
export type MashroomPlugins1 =
  | MashroomPluginLoaderPluginDefinition
  | MashroomWebAppPluginDefinition
  | MashroomApiPluginDefinition
  | MashroomMiddlewarePluginDefinition
  | MashroomStaticPluginDefinition
  | MashroomServicesPluginDefinition
  | MashroomAdminUiIntegrationPluginDefinition
  | MashroomBackgroundJobPluginDefinition
  | MashroomExternalMessagingProviderPluginDefinition
  | MashroomHttpProxyInterceptorPluginDefinition
  | MashroomMemoryCacheProviderPluginDefinition
  | MashroomPortalAppV1PluginDefinition
  | MashroomPortalAppV2PluginDefinition
  | MashroomPortalThemePluginDefinition
  | MashroomPortalLayoutsPluginDefinition
  | MashroomRemotePortalAppRegistryPluginDefinition
  | MashroomPortalPageEnhancementPluginDefinition
  | MashroomPortalAppEnhancementPluginDefinition
  | MashroomSecurityProviderPluginDefinition
  | MashroomSessionStoreProviderPluginDefinition
  | MashroomStorageProviderPluginDefinition
  | MashroomCustomPluginDefinition;

export interface MashroomPlugins {
  devModeBuildScript?: string;
  plugins: MashroomPlugins1[];
  $schema?: any;
}
export interface MashroomPluginLoaderPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "plugin-loader";
  /**
   * The plugin type this loader can load
   */
  loads: string;
  /**
   * Script that exports MashroomPluginLoaderPluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig?: {
    [k: string]: any;
  };
}
export interface MashroomWebAppPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "web-app";
  /**
   * Script that exports MashroomWebAppPluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig: {
    /**
     * The default path where the WebApp will be available
     */
    path: string;
    [k: string]: any;
  };
}
export interface MashroomApiPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "api";
  /**
   * Script that exports MashroomApiPluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig: {
    /**
     * The default path where the API will be available
     */
    path: string;
    [k: string]: any;
  };
}
export interface MashroomMiddlewarePluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "middleware";
  /**
   * Script that exports MashroomMiddlewarePluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig: {
    /**
     * The weight of the middleware in the stack - the higher it is the later it will be executed (Default: 1000)
     */
    order?: number;
    [k: string]: any;
  };
}
export interface MashroomStaticPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "static";
  /**
   * Defines the local root path of the documents
   */
  documentRoot: string;
  defaultConfig: {
    /**
     * The default path where the static documents will be available
     */
    path: string;
    [k: string]: any;
  };
}
export interface MashroomServicesPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "services";
  /**
   * Defines the path to the services. The services ill be accessible through pluginContext.services.myNamespace.service
   */
  namespace: string;
  /**
   * Script that exports MashroomServicesPluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig?: {
    [k: string]: any;
  };
}
export interface MashroomAdminUiIntegrationPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "admin-ui-integration";
  /**
   * The actual web-app or static plugin that should be integrated
   */
  target: string;
  defaultConfig: {
    /**
     * The name that should be appear in the Admin UI menu
     */
    menuTitle: string;
    /**
     * The path in the Admin UI (full path will be /mashroom/admin/ext/<your path>)
     */
    path: string;
    /**
     * The height of the iframe that will contain the target webapp (Default: 80vh)
     */
    height?: string;
    /**
     * The weight of the menu entry, the higher the number the lower will be menu entry be (Default: 100)
     */
    weight?: number;
    [k: string]: any;
  };
}
export interface MashroomBackgroundJobPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "background-job";
  /**
   * Script that exports MashroomBackgroundJobPluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig: {
    /**
     * The execution schedule for the job, must be a valid cron expression, see: https://github.com/node-cron/node-cron
     */
    cronSchedule?: string;
    [k: string]: any;
  };
}
export interface MashroomExternalMessagingProviderPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "external-messaging-provider";
  /**
   * Script that exports MashroomMessagingExternalProvider
   */
  bootstrap: string;
  defaultConfig?: {
    [k: string]: any;
  };
}
export interface MashroomHttpProxyInterceptorPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "http-proxy-interceptor";
  /**
   * Script that exports MashroomHttpProxyInterceptorPluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig: {
    /**
     * The weight of the middleware in the stack - the higher it is the **later** it will be executed (Default: 1000)
     */
    order?: number;
    [k: string]: any;
  };
}
export interface MashroomMemoryCacheProviderPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "memory-cache-provider";
  /**
   * Script that exports MashroomMemoryCacheProviderPluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig?: {
    [k: string]: any;
  };
}
export interface MashroomPortalAppV1PluginDefinition {
  name: string;
  description?: string;
  /**
   * Required plugins
   */
  requires?: string[];
  type: "portal-app";
  /**
   * Optional human readable title of the App. Can be a string or an object with translations.
   */
  title?:
    | string
    | {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[a-z]{2}$".
         */
        [k: string]: string;
      };
  /**
   * An optional category to group the Apps in the Admin App
   */
  category?: string;
  /**
   * A list of tags that can also be used in the search (in the Admin App)
   */
  tags?: string[];
  resources: PortalAppResources;
  sharedResources?: PortalAppResources1;
  /**
   * Optional some screenshots of the App. The screenshots paths are relative to resourcesRoot
   */
  screenshots?: string[];
  /**
   * A global function that implements MashroomPortalAppPluginBootstrapFunction and starts the App within the given host element
   */
  bootstrap: string;
  defaultConfig: {
    /**
     * The root path for APP resources such as JavaScript files and images.
     */
    resourcesRoot: string;
    /**
     * Optional default list of roles that have the VIEW permission if not set via Admin App.
     */
    defaultRestrictViewToRoles?: string[];
    /**
     * Optional mapping between App specific permissions and roles. This corresponds to the permission object passed with the user information to the App
     */
    rolePermissions?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[a-zA-Z_]\w+$".
       */
      [k: string]: string[];
    };
    restProxies?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[a-zA-Z_]\w+$".
       */
      [k: string]: {
        /**
         *  The API target URI (HTTP, HTTPS or WebSocket)
         */
        targetUri: string;
        /**
         * Optional. Add the header X-USER-PERMISSIONS with a comma separated list of permissions calculated from rolePermissions (Default: false)
         */
        sendPermissionsHeader?: boolean;
        /**
         * Optional list of roles that are permitted to access the proxy
         */
        restrictToRoles?: string[];
      };
    };
    /**
     * Optional meta info that could be used to lookup for Apps with specific features or capabilities
     */
    metaInfo?: {
      [k: string]: any;
    };
    /**
     * The default configuration that will be passed to the App. Can be adapted in the Admin App
     */
    appConfig?: {
      [k: string]: any;
    };
  };
}
/**
 * Javascript and CSS resources that must be loaded before the bootstrap method is invoked.
 */
export interface PortalAppResources {
  /**
   * JavaScript resources. Relative to resourcesRoot
   */
  js: string[];
  /**
   * CSS resources. Relative to resourcesRoot
   */
  css?: string[];
}
/**
 * Optional. Same as resources but a shared resource with a given name is only loaded once, even if multiple Portal Apps declare it.
 */
export interface PortalAppResources1 {
  /**
   * JavaScript resources. Relative to resourcesRoot
   */
  js: string[];
  /**
   * CSS resources. Relative to resourcesRoot
   */
  css?: string[];
}
export interface MashroomPortalAppV2PluginDefinition {
  name: string;
  /**
   * Required plugins
   */
  requires?: string[];
  type: "portal-app2";
  /**
   * A global function that implements MashroomPortalAppPluginBootstrapFunction and starts the App within the given host element
   */
  clientBootstrap: string;
  resources: PortalAppResources2;
  sharedResources?: PortalAppResources3;
  /**
   * Optional some screenshots of the App. The screenshots paths are relative to resourcesRoot
   */
  screenshots?: string[];
  local: PortalAppLocalConfig;
  remote?: PortalAppRemoteConfig;
  defaultConfig?: {
    /**
     * Optional human readable title of the App. Can be a string or an object with translations.
     */
    title?:
      | string
      | {
          /**
           * This interface was referenced by `undefined`'s JSON-Schema definition
           * via the `patternProperty` "^[a-z]{2}$".
           */
          [k: string]: string;
        };
    /**
     * An optional category to group the Apps in the Admin App
     */
    category?: string;
    /**
     * A list of tags that can also be used in the search (in the Admin App)
     */
    tags?: string[];
    /**
     * Optional App description. Can be a string or an object with translations.
     */
    description?:
      | string
      | {
          /**
           * This interface was referenced by `undefined`'s JSON-Schema definition
           * via the `patternProperty` "^[a-z]{2}$".
           */
          [k: string]: string;
        };
    /**
     * Optional default list of roles that have the VIEW permission if not set via Admin App.
     */
    defaultRestrictViewToRoles?: string[];
    /**
     * Optional mapping between App specific permissions and roles. This corresponds to the permission object passed with the user information to the App
     */
    rolePermissions?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[a-zA-Z_]\w+$".
       */
      [k: string]: string[];
    };
    caching?: PortalAppCachingConfig;
    editor?: PortalAppEditorConfig;
    proxies?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[a-zA-Z_]\w+$".
       */
      [k: string]: {
        /**
         *  The API target URI (HTTP, HTTPS or WebSocket)
         */
        targetUri: string;
        /**
         * Add the header X-USER-PERMISSIONS with a comma separated list of permissions calculated from rolePermissions (Default: false)
         */
        sendPermissionsHeader?: boolean;
        /**
         * Optional list of roles that are permitted to access the proxy
         */
        restrictToRoles?: string[];
      };
    };
    /**
     * Optional meta info that could be used to lookup for Apps with specific features or capabilities
     */
    metaInfo?: {
      [k: string]: any;
    };
    /**
     * The default configuration that will be passed to the App. Can be adapted in the Admin App
     */
    appConfig?: {
      [k: string]: any;
    };
  };
}
/**
 * Javascript and CSS resources that must be loaded before the bootstrap method is invoked.
 */
export interface PortalAppResources2 {
  /**
   * JavaScript resources. Relative to resourcesRoot
   */
  js: string[];
  /**
   * CSS resources. Relative to resourcesRoot
   */
  css?: string[];
}
/**
 * Optional. Same as resources but a shared resource with a given name is only loaded once, even if multiple Portal Apps declare it.
 */
export interface PortalAppResources3 {
  /**
   * JavaScript resources. Relative to resourcesRoot
   */
  js: string[];
  /**
   * CSS resources. Relative to resourcesRoot
   */
  css?: string[];
}
/**
 * Basic configuration if the App is deployed locally.
 */
export interface PortalAppLocalConfig {
  /**
   * The root path for APP resources such as JavaScript files and images. Needs to be relative within the package.
   */
  resourcesRoot: string;
  /**
   * An optional local SSR bootstrap that returns an initial HTML for the App, relative within the package. Needs to export a function compatible to MashroomPortalAppPluginSSRBootstrapFunction.
   */
  ssrBootstrap?: string;
}
/**
 * Optional configuration if the App is accessed remotely.
 */
export interface PortalAppRemoteConfig {
  /**
   * The root path for App resources such as JavaScript files and images
   */
  resourcesRoot: string;
  /**
   * The path to a route that renders the initial HTML. The route will receive a POST with a JSON body with a "portalAppSetup" property.
   */
  ssrInitialHtmlPath?: string;
}
/**
 * Optional caching configuration.
 */
export interface PortalAppCachingConfig {
  /**
   * SSR caching configuration (Default: same-config-and-user)
   */
  ssrHtml?: "none" | "same-config" | "same-config-and-user";
}
/**
 * Optional custom editor configuration that should be used for the appConfig by the Portal Admin Toolbar.
 */
export interface PortalAppEditorConfig {
  /**
   * The name of the Portal App that should be used to edit the appConfig of this App (Default: in-place)
   */
  editorPortalApp: string;
  /**
   * Where to launch the editor
   */
  position?: "in-place" | "sidebar";
  /**
   * The appConfig the editor App should be launched with (Default: {})
   */
  appConfig?: {
    [k: string]: any;
  };
}
export interface MashroomPortalThemePluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "portal-theme";
  /**
   * Folder that contains assets (can be accessed in the theme via resourcesBasePath)
   */
  resourcesRoot: string;
  /**
   * The folder with the views. There must exist a view  portal which renders a portal page
   */
  views: string;
  /**
   * Script that exports MashroomPortalThemePluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig?: {
    [k: string]: any;
  };
}
export interface MashroomPortalLayoutsPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "portal-layouts";
  /**
   *  A map with the layout html files (on the local file system)
   */
  layouts: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^.*$".
     */
    [k: string]: string;
  };
}
export interface MashroomRemotePortalAppRegistryPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "remote-portal-app-registry";
  /**
   * Script that exports MashroomRemotePortalAppRegistryBootstrapFunction
   */
  bootstrap: string;
  defaultConfig?: {
    /**
     * Priority of this registry if a portal-app with the same name is registered multiple times (Default: 1)
     */
    priority?: number;
    [k: string]: any;
  };
}
export interface MashroomPortalPageEnhancementPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "portal-page-enhancement";
  pageResources: PageEnhancementResources;
  /**
   * Optional script that exports MashroomPortalPageEnhancementPluginBootstrapFunction
   */
  bootstrap?: string;
  defaultConfig: {
    /**
     * The weight of the resources- the higher it is the **later** they will be added to the page (Default: 1000)
     */
    priority?: number;
    /**
     * The root path for APP resources such as JavaScript files and images. Needs to be relative within the package.
     */
    resourcesRoot: string;
    [k: string]: any;
  };
}
/**
 * A list of JavaScript and CSS resourced that should be added to all portal pages
 */
export interface PageEnhancementResources {
  js?: {
    /**
     * Name to the JavaScript or CSS file
     */
    path?: string;
    /**
     * The name of the dynamic resource that should be added
     */
    dynamicResource?: string;
    /**
     * Optional rule property refers to a rule in the instantiated plugin (bootstrap)
     */
    rule?: string;
    /**
     * The location of the script
     */
    location?: "header" | "footer";
    /**
     * Inline the script
     */
    inline?: boolean;
  }[];
  css?: {
    path: string;
    /**
     * Optional rule property refers to a rule in the instantiated plugin (bootstrap)
     */
    rule?: string;
    /**
     * The location of the style
     */
    location?: "header" | "footer";
    /**
     * Inline the style
     */
    inline?: boolean;
  }[];
}
export interface MashroomPortalAppEnhancementPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "portal-app-enhancement";
  /**
   * Optional script that exports MashroomPortalAppEnhancementPluginBootstrapFunction
   */
  bootstrap?: string;
  /**
   * A map of client services that should be injected in the clientServices object the Portal Apps receive.
   * The value needs to be an existing global variable on the page (in window)
   */
  portalCustomClientServices?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-zA-Z_]\w+$".
     */
    [k: string]: string;
  };
  defaultConfig?: {
    [k: string]: any;
  };
}
export interface MashroomSecurityProviderPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "security-provider";
  /**
   * Optional script that exports MashroomSecurityProviderPluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig?: {
    [k: string]: any;
  };
}
export interface MashroomSessionStoreProviderPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "session-store-provider";
  /**
   * Optional script that exports MashroomSessionStoreProviderPluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig?: {
    [k: string]: any;
  };
}
export interface MashroomStorageProviderPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: "storage-provider";
  /**
   * Optional script that exports MashroomStoragePluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig?: {
    [k: string]: any;
  };
}
export interface MashroomCustomPluginDefinition {
  name: string;
  description?: string;
  tags?: string[];
  /**
   * Required plugins
   */
  requires?: string[];
  type: string;
  /**
   * Script that exports MashroomPluginLoaderPluginBootstrapFunction
   */
  bootstrap: string;
  defaultConfig?: {
    [k: string]: any;
  };
  [k: string]: any;
}
